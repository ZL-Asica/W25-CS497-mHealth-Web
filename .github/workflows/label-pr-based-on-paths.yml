name: Auto-label PR based on file paths

on: pull_request_target

jobs:
  label:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Label PR based on changes
        uses: actions/github-script@v7
        with:
          script: |
            const prFiles = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number
            });

            // Define the labels and their colors
            const labelsToColor = {
              components: '1f77b4',   // Blue - Components Related
              pages: 'ff7f0e',        // Orange - Pages Related
              hooks: '2ca02c',        // Green - Hooks Related
              utils: '9467bd',        // Purple - Utils Related
              stores: 'd62728',      // Red - Context Related
              assets: 'ffdd57',        // Yellow - Assets Related
              types: '17becf',        // Cyan - Types Related
              context: 'e377c2',      // Magenta - Context Related
              deps: '8c564b',         // Brown - Dependencies Related
            };

            const labels = new Set();

            prFiles.data.forEach(file => {
              if (file.filename.startsWith('src/components')) {
                labels.add('components');
              }
              if (file.filename.startsWith('src/pages')) {
                labels.add('pages');
              }
              if (file.filename.startsWith('src/hooks')) {
                labels.add('hooks');
              }
              if (file.filename.startsWith('src/utils')) {
                labels.add('utils');
              }
              if (file.filename.startsWith('src/stores')) {
                labels.add('stores');
              }
              if (file.filename.startsWith('src/context')) {
                labels.add('context');
              }
              if (file.filename.startsWith('package.json')
                  || file.filename.startsWith('yarn.lock')
                  || file.filename.startsWith('pnpm-lock.yaml')
                  || file.filename.startsWith('package-lock.json')) {
                labels.add('deps');
              }
              if (file.filename.startsWith('public') || file.filename.startsWith('src/assets')) {
                labels.add('assets');
              }
              if (file.filename.startsWith('src/types') || file.filename.endsWith('.d.ts')) {
                labels.add('types');
              }
            });

            if (labels.size > 0) {
              for (const label of labels) {
                try {
                  // Check if the label exists
                  await github.rest.issues.getLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: label
                  });
                } catch (error) {
                  // If label doesn't exist, create it with the specified color
                  await github.rest.issues.createLabel({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    name: label,
                    color: labelsToColor[label] || 'b0b0b0', // Use default gray if no color specified
                  });
                }
              }

              // Add labels to the PR
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.payload.pull_request.number,
                labels: Array.from(labels)
              });
            }
